// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  name      String
  password  String
  role      Role     @default(USER)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  cars      Car[]
  rents     Rent[]

  @@map("users")
}

enum Role {
  USER
  ADMIN
}

model Car {
  id        String   @id @default(uuid())
  name      String
  model     String
  users     User     @relation(fields: [userId], references: [id])
  image     String?
  price     Int
  year      Int
  available Boolean  @default(true)
  userId    String   @map("user_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  Rent      Rent[]

  @@map("cars")
}

model Rent {
  id        String   @id @default(uuid())
  carId     String   @map("car_id")
  userId    String   @map("user_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // startAt -> data de inicio do aluguel
  startAt DateTime  @map("start_at")
  // endAt -> data de devolução do aluguel
  endAt   DateTime? @map("end_at")

  users User @relation(fields: [userId], references: [id])
  cars  Car  @relation(fields: [carId], references: [id])

  @@unique([carId, userId])
  @@map("rents")
}
